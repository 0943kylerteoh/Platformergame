import pygame
import os

# Initialize pygame
pygame.init()

# Set up display
WIDTH, HEIGHT = 1600, 600  # Large width for long stages
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Platformer Game - End Screen")

# Set up clock
clock = pygame.time.Clock()
FPS = 60

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Font for displaying level and end screen
font = pygame.font.SysFont(None, 36)
end_font = pygame.font.SysFont(None, 72)

# Define gravity
GRAVITY = 0.6

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((50, 50))  # Square shape (50x50)
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.vel_x = 0
        self.vel_y = 0
        self.on_ground = False
    
    def update(self, platforms):
        # Gravity
        self.vel_y += GRAVITY
        if self.vel_y > 10:  # Terminal velocity
            self.vel_y = 10

        # Horizontal movement
        self.rect.x += self.vel_x

        # Horizontal collision
        self.collide(self.vel_x, 0, platforms)

        # Vertical movement
        self.rect.y += self.vel_y

        # Vertical collision
        self.on_ground = False
        self.collide(0, self.vel_y, platforms)

    def collide(self, vel_x, vel_y, platforms):
        for platform in platforms:
            if pygame.sprite.collide_rect(self, platform):
                if vel_x > 0:  # Moving right
                    self.rect.right = platform.rect.left
                if vel_x < 0:  # Moving left
                    self.rect.left = platform.rect.right
                if vel_y > 0:  # Falling down
                    self.rect.bottom = platform.rect.top
                    self.vel_y = 0
                    self.on_ground = True
                if vel_y < 0:  # Jumping up
                    self.rect.top = platform.rect.bottom
                    self.vel_y = 0

    def jump(self):
        if self.on_ground:
            self.vel_y = -12

# Platform class
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

# Level class
class Level:
    def __init__(self, player):
        self.platforms = pygame.sprite.Group()
        self.player = player

    def update(self):
        self.platforms.update()

    def draw(self, screen):
        screen.fill(WHITE)
        self.platforms.draw(screen)

    def setup_level(self, layout):
        for platform_data in layout:
            platform = Platform(*platform_data)
            self.platforms.add(platform)

# Define levels with many platforms
levels = [
    # Level 1: Filled with many platforms
    [(0, 550, WIDTH, 50), (150, 500, 100, 20), (300, 450, 100, 20), (450, 400, 100, 20),
     (600, 350, 100, 20), (750, 300, 100, 20), (900, 250, 100, 20), (1050, 200, 100, 20),
     (1200, 150, 100, 20), (1350, 100, 100, 20), (1500, 50, 100, 20)],
    # Level 2: More platforms, still increasing in challenge
    [(0, 550, WIDTH, 50), (100, 500, 100, 20), (250, 450, 100, 20), (400, 400, 100, 20),
     (550, 350, 100, 20), (700, 300, 100, 20), (850, 250, 100, 20), (1000, 200, 100, 20),
     (1150, 150, 100, 20), (1300, 100, 100, 20), (1450, 50, 100, 20), (1550, 30, 100, 20)],
    # Level 3: Platforms at varying heights, tight jumps
    [(0, 550, WIDTH, 50), (100, 500, 100, 20), (200, 450, 100, 20), (300, 400, 100, 20),
     (400, 350, 100, 20), (500, 300, 100, 20), (600, 250, 100, 20), (700, 200, 100, 20),
     (800, 150, 100, 20), (900, 100, 100, 20), (1000, 50, 100, 20), (1100, 30, 100, 20),
     (1250, 100, 100, 20), (1400, 200, 100, 20), (1550, 150, 100, 20)],
    # Level 4: More platforms to navigate across the long stage
    [(0, 550, WIDTH, 50), (150, 500, 100, 20), (300, 450, 100, 20), (450, 400, 100, 20),
     (600, 350, 100, 20), (750, 300, 100, 20), (900, 250, 100, 20), (1050, 200, 100, 20),
     (1200, 150, 100, 20), (1350, 100, 100, 20), (1500, 50, 100, 20), (1550, 30, 100, 20)],
    # Level 5: Final and toughest level with even more platforms
    [(0, 550, WIDTH, 50), (100, 500, 100, 20), (200, 450, 100, 20), (300, 400, 100, 20),
     (400, 350, 100, 20), (500, 300, 100, 20), (600, 250, 100, 20), (700, 200, 100, 20),
     (800, 150, 100, 20), (900, 100, 100, 20), (1000, 50, 100, 20), (1100, 30, 100, 20),
     (1250, 100, 100, 20), (1400, 200, 100, 20), (1550, 150, 100, 20)],
]

def main():
    # Create player
    player = Player(50, HEIGHT - 100)
    all_sprites = pygame.sprite.Group()
    all_sprites.add(player)

    # Create level
    current_level_no = 0
    current_level = Level(player)
    current_level.setup_level(levels[current_level_no])

    # Game loop
    running = True
    game_won = False
    while running:
        clock.tick(FPS)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if game_won:  # Allow exit from the end screen
                        running = False
                    else:
                        player.jump()

        # Movement handling
        keys = pygame.key.get_pressed()
        if not game_won:
            if keys[pygame.K_LEFT]:
                player.vel_x = -5
            elif keys[pygame.K_RIGHT]:
                player.vel_x = 5
            else:
                player.vel_x = 0

        # Update player and platforms if the game isn't over
        if not game_won:
            all_sprites.update(current_level.platforms)

        # Check if player reached the end of the level
        if player.rect.right > WIDTH and not game_won:
            current_level_no += 1
            if current_level_no >= len(levels):
                # Player finished the game, display the end screen
                game_won = True
            else:
                player.rect.x = 50
                player.rect.y = HEIGHT - 100
                current_level = Level(player)
                current_level.setup_level(levels[current_level_no])

        # Draw everything
        if game_won:
            # End screen display
            screen.fill(WHITE)
            win_text = end_font.render("Congratulations, You Won!", True, BLACK)
            screen.blit(win_text, (WIDTH//2 - win_text.get_width()//2, HEIGHT//2 - win_text.get_height()//2))
        else:
            current_level.draw(screen)
            all_sprites.draw(screen)

            # Display the current level in the top left corner
            level_text = font.render(f"Level: {current_level_no + 1}", True, BLACK)
            screen.blit(level_text, (10, 10))

        # Update the display
        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()
